{
	"Template for cp": {
		"prefix": "cp",
		"scope": "java",
		"body": [
			"// Abhishek Pathak - scor32k",
			"// Date: $CURRENT_YEAR-$CURRENT_MONTH-$CURRENT_DATE $CURRENT_HOUR:$CURRENT_MINUTE:$CURRENT_SECOND",
			"",
			"",
			"import java.io.BufferedReader;",
			"import java.io.IOException;",
			"import java.io.InputStreamReader;",
			"import java.io.PrintWriter;",
			"import java.io.InputStream;",
			"import java.util.StringTokenizer;",
			"import java.util.ArrayList;",
			"import java.util.Arrays;",
			"import java.util.Collections;",
			"import java.util.Random;",
			"",
			"public class A$1 {",
			"    public static void main(String[] args) throws Exception {",
			"        FastScanner fs = new FastScanner(System.in);",
			"        PrintWriter out = new PrintWriter(System.out);",
			"        int T = fs.nextInt();",
			"        $2",
			"        for(int tt = 0; tt < T; tt++){",
			"            $3",
			"        }",
			"            $4",
			"        out.close();",
			"    }",
			"",
			"    static class FastScanner {",
			"        private BufferedReader reader = null;",
			"        private StringTokenizer tokenizer = null;",
			"",
			"        public FastScanner(InputStream in) {",
			"            reader = new BufferedReader(new InputStreamReader(in));",
			"            tokenizer = null;",
			"        }",
			"",
			"        public String next() {",
			"            if (tokenizer == null || !tokenizer.hasMoreTokens()) {",
			"                try {",
			"                    tokenizer = new StringTokenizer(reader.readLine());",
			"                } catch (IOException e) {",
			"                    throw new RuntimeException(e);",
			"                }",
			"            }",
			"            return tokenizer.nextToken();",
			"        }",
			"",
			"        public String nextLine() {",
			"            if (tokenizer == null || !tokenizer.hasMoreTokens()) {",
			"                try {",
			"                    return reader.readLine();",
			"                } catch (IOException e) {",
			"                    throw new RuntimeException(e);",
			"                }",
			"            }",
			"",
			"            return tokenizer.nextToken("\n");",
			"        }",
			"",
			"        public long nextLong() {",
			"            return Long.parseLong(next());",
			"        }",
			"",
			"        public int nextInt() {",
			"            return Integer.parseInt(next());",
			"        }",
			"        ",
			"        public double nextDouble() {",
			"             return Double.parseDouble(next());",
			"         }",
			"        ",
			"        public int[] nextIntArray(int n) {",
			"            int[] a = new int[n];",
			"            for (int i = 0; i < n; i++)",
			"                a[i] = nextInt();",
			"            return a;",
			"        }",
			"        ",
			"        public long[] nextLongArray(int n) {",
			"            long[] a = new long[n];",
			"            for (int i = 0; i < n; i++)",
			"                a[i] = nextLong();",
			"            return a;",
			"        } ",
			"    }",
			"}",
		]
	}
}